Translated from https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/sed.1.html
Suggestion: A nice blog at http://www.funtoo.org/Sed_by_Example,_Part_1

NAME
sed -- stream editor

SYNOPSIS
sed [-Ealn] command [file ...]
sed [-Ealn] [-e command] [-f command_file] [-i extension] [file ...]

DESCRIPTION
     sed 工具读取指定的文件，如果没有指定文件就从标准输入读取，修改输入为由 command list 指定的那样。修改后的输入数据随后被写入到标准输出。

    一条单独的 command 也许应该作为 sed 的第一个参数。多条 command 也许应该通过 -e 或者 -f 选项指定。所有的 command 会按照指定时的顺序被应用于输入的修改上而不是它们的原始内容决定顺序。

    以下选项可用：
    -E	将正则表达式以扩展标准解析而不是基本标准。re_format(7) 手册对两者进行了详细的描述。
    -a	默认情况下，作为 ``w’’ function 参数的那些文本在处理之前就会被创建（或截断）. -a 参数将会让 sed 延迟打开每个文件直到一个 command 包含着的 ``w’’ function 被应用到输入行。
    -e command
    	追加后面的编辑命令到 command 列表。
    -f command_file
    	追加 command_file 内的编辑命令到 command 列表。这些编辑命令应该一行一个。
    -i extension
    	对文件进行直接编辑，保存备份到指定的 extension 中。如果给定一个空的 extension （用两个单引号表示空’’），没有备份会被保存。对文件进行直接编辑的时候不建议使用空 extension，在磁盘空间用尽等等情况下你会存在丢失全部或部分内容的风险（as you risk corruption or partial content in situations where disk space is exhausted, etc.）。
    -l	（这是 L 的小写字母）将输出行做缓冲。
    -n	默认的，当所有的 command 被应用到输入行上之后它就会被回显到标准输出上。-n 选项会抑制这种行为。

    以下是 sed 的 command 格式：
        [address[, address]]function[arguments]

    或许应该在 command 的第一个 address 和 function 之前插入空格。

    正常情况下，sed 重复拷贝输入的每一行，不包含结尾的换行符，到 pattern space 内，（除非在 ``D'' function 之后有什么东西），应用所有的 command 到那些匹配 pattern space 的 address，拷贝 pattern space 到标准输出，再添加换行符，然后删除 pattern space。

    一些 function 会为之后的检索而用 hold space 来保存所有或部分的 pattern space。

Sed Addresses
    address 不是所必须的，但是一旦指定就必须是一个数字（以累加方式标识每一个输入行），美元符号表示输入行的最后一行，或者 context address（在分隔符之间由正则表达式组成）。

    没有 address 的 command line 匹配所有 pattern space。

    只有一个 address 的 command line 匹配所有的跟 address 相配 pattern space。

    由两个 address 组成的 command line 匹配一个范围。这个范围从与第一个 address 相配的 pattern space开始。到与第二个 address 相配的最近的 pattern space 为止。如果第二个 address 是一个数字并且是小于等于匹配第一个 address 行号的数，那么只有第一行会被匹配。如果第二个 address 是一个 context address，sed 不会让第二个 address 与已经匹配第一个 address 的 pattern space 重新匹配。从匹配范围之后的第一行开始，sed 开始为第一个 address 再次查询匹配。

    Editing command 可以通过使用感叹号（``!''）function 被应用到非选择的 pattern space。

Sed Regular Expressions
    sed 中所使用的正则表达式，默认情况下，是标准的正则表达式（BREs，更多信息请查看 re_format(7)），但是可以通过给出 -E 标志来使用扩展的正则表达式。另外，sed 对正则表达式还有以下两个补充：
    1.  在 context address 中，除了反斜杠（``\''）和换行符的任何字符都可以用来作为正则表达式的分隔符。还有，在分隔符前面添加反斜杠将导致以字面意思对待那个字符。举例来说，在这种 \xabc\xdefx context address 中，正则表达式的分隔符其实是那个 ``x'' 但是第二个 ``x'' 只代表它本身，所以实际上的正则表达式是 ``abcxdef''。
    2.  在嵌入 pattern space 中的转义序列 \n 匹配一个换行符。你不能，也绝对不要，在 address 或者 替换 command 中使用字面意义上的的换行符。
    sed 正则表达式的专有特性是它默认用最后一次使用的正则表达式。如果正则表达式是空的，换句话说就是，只指定了分隔符，就使用最后一次遇到过的正则表达式。最后一个正则表达式的定义为作为一个 address 或者替换 command 的一部分被使用过的正则表达式，并且是在运行时，不是编译时。举例来说，这条 command ``/abc/s//XXX/'' 将会把 ``abc'' 替换成 ``XXX''。

Sed Functions
    在以下的 command 列表中，每一条 command 的 address 所允许的最大个数用 [0addr], [1addr], [2addr] 标识，分别代表 零，一，或者两个 address。

    text 参数由一行或者多行组成。如果要在 text 中插入新的一行，换行前加一个反斜杠。text 中的其余反斜杠将被删除并且采用其后字符的字面意义。

    ``r'' 和 ``w'' function 带有可选的 file 参数，用空格符将它们与 function 字母分开。每一个作为参数被传递给 sed 的文件都在输入处理开始之前被创建（或者部分内容被创建???:（or its contents truncated 跟 -a 参数的那一段一样，没理解...））。

    ``b'', ``r'', ``s'', ``t'', ``w'', ``y'', ``!'', 和 ``:'' function 都接受参数。以下梗概说明了哪些参数必须用空格符来与 function 字母分开。

    两个或以上的 function 便可以形成 function-list。这就是一个用换行符分隔开的 sed function 列表，像这样：
        { function
          function
          ...
          function
         }

    左大括号 ``{'' 的前后都可以带有空格符。function 的前面也可以有空格符。右的大括号的前面必须有换行符还可以加一个可选的空格符。

    [2addr] function-list
            只有当 pattern space 被匹配的时候执行 function-list。

    [1addr]a\
    text    在每次尝试读取一个输入行之前立即的将 text 写入到标准输出，无论是 ``N'' function 的执行还是新循环周期的开始。

    [2addr]b[label]
            通过指定的 label 跳转到 ``:'' function 所在位置。如果没有指定 label，跳转到脚本的最后。

    [2addr]c\
    text    删除 pattern space。借由 0 或 1 address 或者第二个 address 的结尾所代表的范围，将 text 写入到标准输出。

    [2addr]d
            删除 pattern space 并开始下一个循环周期。

    [2addr]D
            通过第一个换行符删除 pattern space 的原始分段并开始下一个循环周期。

    [2addr]g
            用 hold space 的内容代替 pattern space 的内容。

    [2addr]G
            添加一个换行符紧接着 hold space 的内容到 pattern space。

    [2addr]h
            用 pattern space 的内容代替 hold space 的内容。

    [2addr]H
            添加一个换行符紧跟着 pattern space 的内容到 hold space。

    [1addr]i\
    text    将 text 写入到标准输出。

    [2addr]l
            （小写的 L）以直观明确的形式将 pattern space 写入到标准输出。就像下面这样：

                    backslash          \\
                    alert              \a
                    form-feed          \f
                    carriage-return    \r
                    tab                \t
                    vertical tab       \v

            不可打印字符将为每一个字符中的字节（最有效的字节优先）以三位八进制数字（前面带一个反斜杠）表示  (❓：\342\235\223)。超长行被自动折行，被折行的位置通过一个反斜杠加一个换行符标识。每行的结尾由 ``$'' 符号标识。

    [2addr]n
            如果默认输出没有被禁止就将 pattern space 写入到标准输出，并且用下一个输入行代替 pattern space。

    [2addr]N
            添加下一个输入行到 pattern space，用嵌入一个换行符的方式将被添加的原料和原始内容分割开来。注意当前行号的变化。

    [2addr]p
            将 pattern space 写入到标准输出。

    [2addr]P
            写 pattern space ，到第一个换行字符输出到标准输出。(???: 没搞明白，p 和 P 有什么区别？)

    [1addr]q
            跳转到脚本的最后并无需下一个循环周期直接退出。

    [1addr]r file
            在下一次尝试读取一个输入行之前立即的将 file 的内容写入到标准输出。如果 file 因为各种原因不能被读取，只是被默默的忽略掉并没有错误状态会被设置。

    [2addr]s/regular expression/replacement/flags
            将第一个出现在 pattern space 中的正则表达式匹配对象替换为 replacement 字符串。除反斜杠和换行符之外的任何字符都能代替斜杠来分割 RE 和 replacement。在 RE 和 replacement 之内，如果那个分隔符前面有一个斜杠就表示它本身的字面意思。

            在 replacement 中出现的 ``&'' 符号会被与正则表达式所匹配的字符串替换。可以在``&'' 符号前面加一个反斜杠来消除这个上下文环境中的特殊用法。``\#'' 字符中，``#'' 占一个字符位，会被和相应的 backreference 表达式匹配的文本所替换（see re_format(7)）。

            一行可以通过插入一个换行符将其分割。要在 replacement 字符串中标识一个换行符，请在它前面加一个反斜杠。

            替换 function 中 flag 的值可以没有或者以下值中的几个：
                    N       在 pattern space 中只替换 N 次匹配的正则表达式。

                    g       为所有不相重叠的正则表达式的匹配值做替换，不仅仅是只替换第一个。

                    p       如果发生了替换行为将 pattern space 写入到标准输出。如果 replacement 字符串与它所替换的相同，它还是会被认为是一个替换。

                    w file  如果发生了替换 pattern space 会被追加到 file。如果 replacement 字符串与它所替换的相同，它还是会被认为是一个替换。

    [2addr]t [label]
            如果最近一次对输入行的读取或者 ``t'' function 的执行发生了任何的替换行为就跳转到 ``:'' function 所指向的 label。如果没有指定 label，就跳转到脚本的最后。

    [2addr]w file
            追加 pattern space 到 file。

    [2addr]x
            交换 pattern space 和 hold space 的内容。

    [2addr]y/string1/string2/
            用相应的 string2 的字符替换 pattern space 中所有 string1 中出现的字符。除反斜杠和换行符之外的任何字符都可以被用来代替斜杠去分割字符串。在 string1 和 string2 内部，一个反斜杠加一个 ``n'' 会被换行符取代。一对儿反斜杠会被字面意义的反斜杠取代。最后，所有反斜杠后面的字符（除了换行符）都表示它的字面意义。

    [2addr]!function
    [2addr]!function-list
            应用 function 或者 function-list 到那些没有被 address 匹配的行上。

    [0addr]:label
            这个 function 什么也不干；它将 label 指向 ``b'' 和 ``t'' command 可能跳转的位置。

    [1addr]=
            将行号写入标准输出后面跟着一个换行符。

    [0addr]
            空行被忽略。

    [0addr]#
            ``#'' 以及本行的剩余部分是被忽略的（当作是注释），一种列为情况是如果文件中的头两个字符是 ``#n''，默认的输出会被禁用。这就跟在命令行指定 -n 选项是一样的。




ENVIRONMENT
     The COLUMNS, LANG, LC_ALL, LC_CTYPE and LC_COLLATE environment variables affect the execution of sed as
     described in environ(7).

EXIT STATUS
     sed 工具成功是返回 0，如果有错误发生就 >0。

LEGACY DESCRIPTION
     Warnings are not generated for unused labels.  In legacy mode, they are.

     In the -y function, doubled backslashes are not converted to single ones.  In legacy mode, they are.

     For more information about legacy mode, see compat(5).

SEE ALSO
     awk(1), ed(1), grep(1), regex(3), compat(5), re_format(7)

STANDARDS
     The sed utility is expected to be a superset of the IEEE Std 1003.2 (``POSIX.2'') specification.

     The -E, -a and -i options are non-standard FreeBSD extensions and may not be available on other operat-ing operating
     ing systems.

HISTORY
     A sed command, written by L. E. McMahon, appeared in Version 7 AT&T UNIX.

AUTHORS
     Diomidis D. Spinellis <dds@FreeBSD.org>

BUGS
     Multibyte characters containing a byte with value 0x5C (ASCII `\') may be incorrectly treated as line
     continuation characters in arguments to the ``a'', ``c'' and ``i'' commands.  Multibyte characters can-not cannot
     not be used as delimiters with the ``s'' and ``y'' commands.
